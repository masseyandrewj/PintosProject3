Pintos3/PintosProject3/pintos/src/userprog/syscall.c
507c507,513
< /* add code here */
---
>   list_remove(&m->elem);
> 
>   for (int i = 0; i < m->page_cnt; i++)
>   {
>     page_deallocate(m->base + PGSIZE * i);
>   }
>   free(m);

563c569
< /* add code here */
---
>   struct mapping *m = malloc (sizeof *m);

564a571,572
>   m = lookup_mapping(mapping);
>   unmap(m);

Pintos3/PintosProject3/pintos/src/vm/page.ct_3/pintos/src/vm/page.c
#14a15,16
#> #define PUSHA_SIZE 32
#> 
#
#54,56c56,60
#< 
#< /* add code */
#< 
#---
#>       struct thread* cur_thread = thread_current();
#>       if (address >= PHYS_BASE - STACK_MAX && address >= cur_thread->user_esp - PUSHA_SIZE)
#>       {
#>         return page_allocate ((void *) address, false);
#>       }

75c79
<       swap_in (p); 
---
>       swap_in (p);

147,148d150
< 
<   /* Collin - Proj3 */

153,155c155,158
<   /* End proj3 */
<    
< /* add code here */
---
> 
>   /* Write dirty page back to swap. */
>   if(p->file == NULL)
>       ok = swap_out(p);

157a161,169
>   else if (p->file != NULL)
>     {
>       if(!dirty)
>         ok = true;
>       else if (!p->private)
>         ok = file_write_at(p->file, p->frame->base, p->file_bytes, p->file_offset) == p->file_bytes;
>       else
>         ok = swap_out(p);
>     }

159c171,173
< /* add code here */
---
>   // No longer in a frame
>   if(ok)
>     p->frame = NULL;

Pintos3/PintosProject3/pintos/src/vm/swap.c
77c77,79
< /* add code here */ 
---
>   for (i = 0; i < PAGE_SECTORS; i++)
>     block_write (swap_device, p->sector + i,
>                 p->frame->base + i * BLOCK_SECTOR_SIZE);  
