               +---------------------------+
       	       |         CIS 520           |
		           | PROJECT 3: Virtual Memory |
		           |     DESIGN DOCUMENT       |
		           +---------------------------+

---- GROUP ----

>> Fill in the names of your group members.

AJ Massey
Lance Pettay
Collin Vossman

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- ALGORITHMS ----

>> A1: In a few paragraphs, describe the existing code for locating the
>> frame, if any, that contains the data of a given page.

- From what I have understood throughout reading the Project Specs and the A.6 Appendix over virtual
memory and how it relates to Physical Memory, it appears that what happens is that PintOS has created
a set amount of space (for this example we will say 32 bits) and makes sure to mark off a portion of that
(about 20 bits) for the Frame Number and the other 12 bits for the Frame Offset.

The Frame Number is used to keep track of the various Pages that are stored and being used by that Frame. 
When these pages are being mapped to the Physical Memory, the Frame uses a 1-to-1 basis and makes sure to 
build off of the PHYS_BASE. If the Physical Memory is using 0x1234, then the Frame's Virtual Address for that
can be located at PHYS_BASE + 0x1234.

The code found in threads/vaddr.h supports these assumptions by declaring what PHYS_BASE is and then checking
to see if the vaddr is greater than or less than that PHYS_BASE.

---- SYNCHRONIZATION ----

>> A2: When two user processes both need a new frame at the same time,
>> how are races avoided?

- When a process goes to do a Page In, then the Page->Frame is locked to prevent other pages from being able to 
call for a Frame. Then, that Frame is loaded into the Page Table and, upon success, the Page->Frame->Lock is 
released and allowed to go onto the next Page.

		       PAGING TO AND FROM DISK
		       =======================

---- ALGORITHMS ----

>> B1: When a frame is required but none is free, some frame must be
>> evicted.  Describe the algorithm used to choose a frame to evict.

- The current structure for Frame Eviction is as follows:
1) A Frame is chosen using the Page Replacement algorithm.
2) Make sure that all references of said Frame are removed from any (and all) Pages that could reference it.
3) And lastly, if necessary, we can write the page to either the File System or to the Swap function.
4) Voila! The Frame can now be used for a different Page if desired.

>> B2: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

I think that this project was probably one of the easiest so far, aside from project 0. 
The concepts on the project took a while to understand but actually implementing the changes
were a breeze compared to project 2.  There was so much less coding and I may be saying this 
simply because project 2 was so rough but comparatively it was a breeze and a good level of
challenge.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

This project really helped me understand virtual memory a lot better, I had no idea how 
virtual memory worked, I understood the idea of virtual memory and addressing but had no
idea how to go about implementing these until this project.  This hands-on project really
supplementing my learning.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

This project is fairly short but most student's may put it off till the last minute when they see 
the FAQ that says we only change about 50 lines vs the hundreds of lines from project 2.  Just 
keep pressing the class to get started because it does take a little while to get going and 
will definitely cause a lot of problems if they wait till the last minute.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Nothing.

>> Any other comments?
- Not at this time.
